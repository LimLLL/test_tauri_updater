name: "Unpack and Publish"

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  unpack-and-publish:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest' # for Arm based macs (M1 and above).
            args: '--target aarch64-apple-darwin'
#          - platform: 'macos-latest' # for Intel based macs.
#            args: '--target x86_64-apple-darwin'
#          - platform: 'ubuntu-22.04'
#            args: ''
#          - platform: 'windows-latest'
#            args: '--config src-tauri/tauri.windows.conf.json'

    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

#      - name: Install unzip utility (Linux)
#        if: runner.os == 'Linux'
#        run: sudo apt-get install -y unzip
#
#      - name: Install unzip utility (MacOS)
#        if: runner.os == 'macOS'
#        run: brew install unzip
#
#      - name: Unzip code
#        run: unzip -o -P ${{ secrets.ZIP_PASSWORD }} compressed_code.zip

      - name: Install dependencies (Ubuntu only)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: 'npm'

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'
          key: ${{ matrix.args }}

      - name: Install frontend dependencies
        run: npm install

      - name: Read and Sanitize Release Body
        id: sanitize_release_body
        run: |
          RELEASE_BODY=$(cat releaseBody.txt)
          # Replace semicolons with newlines
          SANITIZED_BODY=$(echo "$RELEASE_BODY" | tr ';' '\n')
          echo "RELEASE_BODY<<EOF" >> "$GITHUB_ENV"
          echo "$SANITIZED_BODY" >> "$GITHUB_ENV"
          echo "EOF" >> "$GITHUB_ENV"
          echo "Sanitized release body: $SANITIZED_BODY"

      - uses: LimLLL/tauri-action-renameArtifacts@v0.5.18
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
        with:
          tagName: app-v__VERSION__
          releaseName: 'App v__VERSION__'
          releaseBody: ${{ env.RELEASE_BODY }}
          releaseDraft: true
          prerelease: false
          args: ${{ matrix.args }}
          updaterJsonPreferNsis: true
          renameArtifacts: 'YaTai_Intelligence'

  modify-latest-json:
    needs: unpack-and-publish
    runs-on: ubuntu-22.04
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Fetch Latest Draft Release and Modify latest.json
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
            REPO="${GITHUB_REPOSITORY}"  # Use the GITHUB_REPOSITORY environment variable
          
            # Find the latest release draft
            RELEASE_ID=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
              "https://api.github.com/repos/${REPO}/releases" | \
              jq -r '[.[] | select(.draft == true)][0].id')
          
            if [ -z "$RELEASE_ID" ]; then
              echo "No draft release found"
              exit 1
            fi
          
            # Get assets for the draft release
            ASSETS=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
              "https://api.github.com/repos/${REPO}/releases/$RELEASE_ID/assets")
          
            LATEST_JSON_ASSET=$(echo "$ASSETS" | jq -r '.[] | select(.name == "latest.json") | .url')
          
            if [ -z "$LATEST_JSON_ASSET" ]; then
              echo "No latest.json asset found"
              exit 1
            fi
          
            # Download the latest.json
            curl -L -H "Authorization: token $GITHUB_TOKEN" \
              -H "Accept: application/octet-stream" \
              "$LATEST_JSON_ASSET" -o latest.json
          
            # Delete existing latest.json asset if it exists
            ASSET_ID=$(echo "$ASSETS" | jq -r '.[] | select(.name == "latest.json") | .id')
            if [ -n "$ASSET_ID" ]; then
              curl -X DELETE \
                -H "Authorization: token $GITHUB_TOKEN" \
                "https://api.github.com/repos/${REPO}/releases/assets/$ASSET_ID"
            fi
          
            # Modify latest.json with GitHub Proxy
            sed -i 's|https://github.com/|https://ghproxy.uk.arm.useforall.top/https://github.com/|g' latest.json
            
            # Show the modified content
            cat latest.json
          
            # Upload the modified latest.json
            curl -X POST \
              -H "Authorization: token $GITHUB_TOKEN" \
              -H "Content-Type: application/octet-stream" \
              --data-binary "@latest.json" \
              "https://uploads.github.com/repos/${REPO}/releases/$RELEASE_ID/assets?name=latest.json"
